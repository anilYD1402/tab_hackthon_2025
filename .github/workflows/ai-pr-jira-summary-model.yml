name: AI PR Review Summary Model

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  summarize:
    runs-on: [self-hosted, macOS, ARM64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if PR_COMMENT_TOKEN secret is set
        run: |
          if [ -z "${{ secrets.PR_COMMENT_TOKEN }}" ]; then
            echo "PR_COMMENT_TOKEN secret is NOT set."
            exit 1
          else
            echo "PR_COMMENT_TOKEN secret is available."
          fi

      - name: Extract Jira Issue Key
        id: extract
        run: |
          ISSUE_KEY=$(echo "${{ github.event.pull_request.title }}" | grep -oE '[A-Za-z]+-[0-9]+' | tr '[:lower:]' '[:upper:]')
          echo "issue_key=$ISSUE_KEY" >> $GITHUB_OUTPUT

      - name: Get Jira Issue Description
        id: jira
        env:
          JIRA_TOKEN: ${{secrets.TAB_JIRA_TOKEN}}
          JIRA_EMAIL: ${{secrets.TAB_JIRA_EMAIL}}
        run: |
          echo "Fetching Jira issue description for ${{ steps.extract.outputs.issue_key }}"
          RESPONSE=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
            -X GET "https://tabcorp.atlassian.net/browse/PG-246")
          
          echo "----- RAW Jira API Response (first 1000 chars) -----"
          echo "$RESPONSE" | head -c 1000
          
          DESCRIPTION=$(echo "$RESPONSE" | jq -r '
            def walkContent:
              .[] | if .content then (.content | walkContent) else .text end;
            .fields.description.content | walkContent
          ' | tr '\n' ' ')
          
          echo "----- Parsed Jira Description -----"
          echo "$DESCRIPTION"
          
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

      - name: Get Full PR Diff
        id: diff
        env:
          GITHUB_TOKEN: ${{ secrets.TAB_GIT_TOKEN }}
        run: |
          curl -s -H "Accept: application/vnd.github.v3.diff" \
               -H "Authorization: token $GITHUB_TOKEN" \
               "https://github.tabcorp.com.au/api/v3/repos/TabDigital/Flutter-TAB/pulls/14526" > pr_diff.txt
          head -n 50 pr_diff.txt

      - name: Check PR Size
        id: pr_size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            core.setOutput("changed_files", pr.changed_files);

      - name: Generate Semantic AI Review with Jira Context (Local Ollama)
        id: ai
        if: steps.pr_size.outputs.changed_files <= 100
        shell: bash
        run: |
          echo "Generating semantic AI review with Jira context using local Ollama..."

          DIFF_CONTENT=$(cat pr_diff.txt)
          PR_DIFF=$(jq -Rs . <<< "$DIFF_CONTENT")
          echo "---- Escaped PR Diff ----"
          echo "$PR_DIFF"
          
          # Escape Jira description safely for JSON
       
          JIRA_DESCRIPTION=$(echo "${{ steps.jira.outputs.raw_json }}" | jq -rRs .)
          echo "$JIRA_DESCRIPTION"
          PAYLOAD=$(jq -n \
           --arg model "phi3:mini" \
           --arg prompt "You are a senior Flutter code reviewer with deep understanding of architecture, feature requirements, and quality assurance.
                      Analyze the Pull Request using the Jira Ticket Description & Acceptance Criteria (ACs) along with Git Diff.
                      Your job is to help reviewers, QA, and product teams understand:
                      - The semantic code changes,without any code in the summary.
                      - Their alignment with the Jira ticket.
                      - QA scope.
                      - And any potential side effects..

           Input:
            Jira Ticket Context: $JIRA_DESCRIPTION
            PR Diff: $PR_DIFF

             - Your Output Should Include:
          
                  - ✅  **Semantic Summary per File or Module**
                    - Summarize only meaningful functional or architectural changes in each file.
                    - Ignore formatting-only, comment, lint-related changes and generated files.
                    - Explain how the change aligns with the Jira requirement and what was updated vs. the original code.
                    - Compare code changes with the Jira ticket, highlighting them in bold and red colour any missing Jira items in the code and any extra code changes not mentioned in Jira.
          
                  - 🎯 Explain **what changed vs the original code** in the context of the Jira ticket.
                  - 🧪 :mag: Be precise, insightful, and helpful. Use bullet points where needed for clarity. Highlight gaps, concerns, or dependencies clearly.
                  - ⚠️ **Potential Side Effects / Affected Modules**
                     - Highlight other areas, modules, or flows that could be impacted by this change.
                     - Include dependencies, shared components, or reused logic.
                     - Mention if further regression testing is needed elsewhere.
                  - 📌 *QA Impact Summary**
                     - List all modified files/classes.
                     - Describe what QA needs to test based on logic/UI/UX/backend changes." \
            --argjson stream false \
             '{model: $model, prompt: $prompt, stream: $stream}')
             RESPONSE=$(curl -s -X POST http://localhost:11434/api/generate \
               -H "Content-Type: application/json" \
                -d "$PAYLOAD")

          echo "----- RAW OLLAMA RESPONSE -----"
          echo "$RESPONSE"

          SUMMARY=$(echo "$RESPONSE" | jq -r '.response // empty')
          if [ -z "$SUMMARY" ]; then
            SUMMARY="⚠️ Ollama returned no content. Possible empty PR or model issue."
          fi

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post AI Review as PR Comment
        uses: actions/github-script@v7
        env:
          REVIEW_SUMMARY: ${{ steps.ai.outputs.summary }}
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            let summary = process.env.REVIEW_SUMMARY || '';
            summary = summary.trim();
            if (!summary) {
              core.setFailed("Summary is empty. Skipping PR comment.");
            } else {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### 🧠 AI Semantic PR Review with Jira Context (Local Model)\n\n${summary}`
              });
            }
